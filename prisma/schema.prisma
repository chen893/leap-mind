// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    githubId      String?   @unique
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Relations
    accounts         Account[]
    sessions         Session[]
    createdCourses   Course[]             @relation("CourseCreator")
    courseProgresses UserCourseProgress[]
    assessments      Assessment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// 课程模型
model Course {
    id                    String   @id @default(cuid())
    title                 String
    description           String   @db.Text
    creatorId             String
    isPublic              Boolean  @default(false)
    joinedByCount         Int      @default(0)
    averageScoreSum       BigInt   @default(0)
    totalAssessmentsCount Int      @default(0)
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt

    // Relations
    creator        User                 @relation("CourseCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    chapters       Chapter[]
    userProgresses UserCourseProgress[]

    @@index([isPublic, joinedByCount])
    @@index([creatorId])
}

// 章节模型
model Chapter {
    id                  String   @id @default(cuid())
    courseId            String
    chapterNumber       Int
    title               String
    description         String?  @db.Text // 初始创建时允许为空，按需填充
    contentMd           String?  @db.Text // 初始创建时允许为空，按需填充
    contentQualityScore Float?   @default(0) // 内容质量评分, 范围0-100
    generationCost      Decimal? @db.Decimal(10, 4) // 记录AI生成该内容的token消耗成本
    lastUpdated         DateTime @updatedAt
    createdAt           DateTime @default(now())

    // Relations
    course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
    assessments Assessment[]

    @@unique([courseId, chapterNumber])
    @@index([courseId])
}

// 用户课程进度模型
model UserCourseProgress {
    id               String       @id @default(cuid())
    userId           String
    courseId         String
    status           CourseStatus @default(IN_PROGRESS)
    unlockedChapters Int[]        @default([1])
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt

    // Relations
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    @@unique([userId, courseId])
    @@index([userId])
    @@index([courseId])
}

// 评估记录模型
model Assessment {
    id              String   @id @default(cuid())
    chapterId       String
    userId          String
    userAnswersJson Json // 存储用户的答案
    score           Int // 评分
    feedbackJson    Json // AI反馈
    canProgress     Boolean  @default(false) // 是否可以继续下一章
    createdAt       DateTime @default(now())

    // Relations
    chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([chapterId])
    @@index([userId])
    @@index([userId, chapterId])
}

// 枚举类型
enum CourseStatus {
    IN_PROGRESS
    COMPLETED
}
