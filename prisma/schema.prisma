// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    githubId      String?   @unique
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt

    // Relations
    accounts         Account[]
    sessions         Session[]
    createdCourses   Course[]             @relation("CourseCreator")
    courseProgresses UserCourseProgress[]
    assessments      Assessment[]
    questionAnswers  UserQuestionAnswer[]
    userPoints       UserPoints?
    achievements     UserAchievement[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// 课程模型
model Course {
    id                    String   @id @default(cuid())
    title                 String
    description           String   @db.Text
    creatorId             String
    isPublic              Boolean  @default(false)
    joinedByCount         Int      @default(0)
    averageScoreSum       BigInt   @default(0)
    totalAssessmentsCount Int      @default(0)
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt

    // Relations
    creator        User                 @relation("CourseCreator", fields: [creatorId], references: [id], onDelete: Cascade)
    chapters       Chapter[]
    userProgresses UserCourseProgress[]

    @@index([isPublic, joinedByCount])
    @@index([creatorId])
}

// 章节模型
model Chapter {
    id                  String   @id @default(cuid())
    courseId            String
    chapterNumber       Int
    title               String
    description         String?  @db.Text // 初始创建时允许为空，按需填充
    contentMd           String?  @db.Text // 初始创建时允许为空，按需填充
    contentQualityScore Float?   @default(0) // 内容质量评分, 范围0-100
    generationCost      Decimal? @db.Decimal(10, 4) // 记录AI生成该内容的token消耗成本
    lastUpdated         DateTime @updatedAt
    createdAt           DateTime @default(now())

    // Relations
    course      Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
    assessments Assessment[]
    questions   ChapterQuestion[]

    @@unique([courseId, chapterNumber])
    @@index([courseId])
}

// 用户课程进度模型
model UserCourseProgress {
    id               String       @id @default(cuid())
    userId           String
    courseId         String
    status           CourseStatus @default(IN_PROGRESS)
    unlockedChapters Int[]        @default([1])
    createdAt        DateTime     @default(now())
    updatedAt        DateTime     @updatedAt

    // Relations
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

    @@unique([userId, courseId])
    @@index([userId])
    @@index([courseId])
}

// 章节问题模型（苏格拉底式问答）
model ChapterQuestion {
    id               String           @id @default(cuid())
    chapterId        String
    questionNumber   Int // 问题序号 1-5
    questionText     String           @db.Text
    questionType     QuestionType     @default(OPEN_ENDED)
    questionCategory QuestionCategory @default(SOCRATIC) // 问题分类
    difficulty       Difficulty       @default(MEDIUM) // 问题难度
    hints            String[]         @default([]) // 提示信息
    options          Json? // 选择题选项（可选）
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt

    // Relations
    chapter     Chapter              @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    userAnswers UserQuestionAnswer[]

    @@unique([chapterId, questionNumber])
    @@index([chapterId])
}

// 用户问题回答模型
model UserQuestionAnswer {
    id         String   @id @default(cuid())
    userId     String
    questionId String
    answer     String   @db.Text
    aiScore    Int? // AI评分 0-100
    aiFeedback String?  @db.Text // AI反馈
    isCorrect  Boolean? // 是否正确/通过
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    // Relations
    user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    question ChapterQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

    @@unique([userId, questionId])
    @@index([userId])
    @@index([questionId])
}

// 用户积分模型
model UserPoints {
    id             String    @id @default(cuid())
    userId         String    @unique
    totalPoints    Int       @default(0)
    level          Int       @default(1)
    currentExp     Int       @default(0)
    expToNextLevel Int       @default(100)
    streak         Int       @default(0) // 连续学习天数
    lastActiveDate DateTime?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt

    // Relations
    user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    pointsHistory PointsHistory[]

    @@index([totalPoints])
    @@index([level])
}

// 积分历史记录
model PointsHistory {
    id           String       @id @default(cuid())
    userId       String
    pointsChange Int // 积分变化（正数为获得，负数为消耗）
    reason       PointsReason
    description  String?
    relatedId    String? // 相关记录ID（如章节ID、成就ID等）
    createdAt    DateTime     @default(now())

    // Relations
    userPoints UserPoints @relation(fields: [userId], references: [userId], onDelete: Cascade)

    @@index([userId])
    @@index([createdAt])
}

// 成就定义模型
model Achievement {
    id          String              @id @default(cuid())
    name        String
    description String              @db.Text
    icon        String // 图标名称
    category    AchievementCategory
    condition   Json // 成就条件（JSON格式）
    points      Int // 获得积分
    isActive    Boolean             @default(true)
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt

    // Relations
    userAchievements UserAchievement[]

    @@index([category])
    @@index([isActive])
}

// 用户成就记录
model UserAchievement {
    id            String   @id @default(cuid())
    userId        String
    achievementId String
    unlockedAt    DateTime @default(now())
    progress      Json? // 进度信息（可选）

    // Relations
    user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

    @@unique([userId, achievementId])
    @@index([userId])
    @@index([achievementId])
}

// 评估记录模型（保留原有功能）
model Assessment {
    id              String   @id @default(cuid())
    chapterId       String
    userId          String
    userAnswersJson Json // 存储用户的答案
    score           Int // 评分
    feedbackJson    Json // AI反馈
    canProgress     Boolean  @default(false) // 是否可以继续下一章
    pointsEarned    Int      @default(0) // 本次评估获得的积分
    createdAt       DateTime @default(now())

    // Relations
    chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([chapterId])
    @@index([userId])
    @@index([userId, chapterId])
}

// 枚举类型
enum CourseStatus {
    IN_PROGRESS
    COMPLETED
}

enum QuestionType {
    OPEN_ENDED // 开放式问题
    MULTIPLE_CHOICE // 选择题
    TRUE_FALSE // 判断题
    FILL_BLANK // 填空题
}

enum QuestionCategory {
    SOCRATIC // 苏格拉底式问题
    REFLECTIVE // 反思性问题
    ANALYTICAL // 分析性问题
    CREATIVE // 创造性问题
    PRACTICAL // 实践性问题
}

enum Difficulty {
    EASY // 简单
    MEDIUM // 中等
    HARD // 困难
}

enum PointsReason {
    CHAPTER_COMPLETION // 完成章节
    QUESTION_CORRECT // 问题回答正确
    DAILY_LOGIN // 每日登录
    STREAK_BONUS // 连续学习奖励
    ACHIEVEMENT_UNLOCK // 解锁成就
    COURSE_COMPLETION // 完成课程
    PERFECT_SCORE // 满分奖励
}

enum AchievementCategory {
    LEARNING // 学习成就
    STREAK // 连续性成就
    MASTERY // 精通成就
    SOCIAL // 社交成就
    MILESTONE // 里程碑成就
}
